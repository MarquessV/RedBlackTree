FUNCTION  <SNR>71_hl_group_exists()
Called 134 times
Total time:   0.001649
 Self time:   0.001649

count  total (s)   self (s)
  134              0.000457   if !hlexists(a:group)
                                return 0
                              elseif empty(synIDattr(hlID(a:group), 'fg'))
    4              0.000003     return 0
                              endif
  130              0.000099   return 1

FUNCTION  airline#check_mode()
Called 468 times
Total time:   0.098938
 Self time:   0.052810

count  total (s)   self (s)
  468              0.001932   if !exists("s:airline_run")
                                let s:airline_run = 0
                              endif
  468              0.001730   let s:airline_run += 1
                            
  468              0.001517   let context = s:contexts[a:winnr]
                            
  468              0.001557   if get(w:, 'airline_active', 1)
  468              0.001531     let l:m = mode()
  468              0.000936     if l:m ==# "i"
                                  let l:mode = ['insert']
                                elseif l:m ==# "R"
                                  let l:mode = ['replace']
                                elseif l:m =~# '\v(v|V||s|S|)'
    1              0.000003       let l:mode = ['visual']
    1              0.000001     elseif l:m ==# "t"
                                  let l:mode = ['terminal']
                                else
  467              0.001071       let l:mode = ['normal']
  467              0.000391     endif
  468              0.002349     let w:airline_current_mode = get(g:airline_mode_map, l:m, l:m)
  468              0.000392   else
                                let l:mode = ['inactive']
                                let w:airline_current_mode = get(g:airline_mode_map, '__')
                              endif
                            
  468              0.001894   if g:airline_detect_modified && &modified
                                call add(l:mode, 'modified')
                              endif
                            
  468              0.000955   if g:airline_detect_paste && &paste
                                call add(l:mode, 'paste')
                              endif
                            
  468              0.001947   if g:airline_detect_crypt && exists("+key") && !empty(&key)
                                call add(l:mode, 'crypt')
                              endif
                            
  468              0.000992   if g:airline_detect_spell && &spell
                                call add(l:mode, 'spell')
                              endif
                            
  468              0.000724   if &readonly || ! &modifiable
                                call add(l:mode, 'readonly')
                              endif
                            
  468              0.002173   let mode_string = join(l:mode)
  468              0.000852   if s:airline_run < 3
                                " skip this round.
                                " When this function is run too early after startup,
                                " it forces a redraw by vim which will remove the intro screen.
                                let w:airline_lastmode = mode_string
                                return ''
                              endif
  468              0.001746   if get(w:, 'airline_lastmode', '') != mode_string
    2   0.000696   0.000029     call airline#highlighter#highlight_modified_inactive(context.bufnr)
    2   0.045489   0.000028     call airline#highlighter#highlight(l:mode, context.bufnr)
    2              0.000006     let w:airline_lastmode = mode_string
    2              0.000002   endif
                            
  468              0.000456   return ''

FUNCTION  <SNR>37_Highlight_Matching_Pair()
Called 448 times
Total time:   0.522625
 Self time:   0.522625

count  total (s)   self (s)
                              " Remove any previous match.
  448              0.003888   if exists('w:paren_hl_on') && w:paren_hl_on
  100              0.000647     silent! call matchdelete(3)
  100              0.000393     let w:paren_hl_on = 0
  100              0.000154   endif
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  448              0.002480   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
                              endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  448              0.001834   let c_lnum = line('.')
  448              0.001358   let c_col = col('.')
  448              0.000778   let before = 0
                            
  448              0.001681   let text = getline(c_lnum)
  448              0.012912   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
  448              0.001282   if empty(matches)
                                let [c_before, c] = ['', '']
                              else
  448              0.002372     let [c_before, c] = matches[1:2]
  448              0.000464   endif
  448              0.008241   let plist = split(&matchpairs, '.\zs[:,]')
  448              0.001987   let i = index(plist, c)
  448              0.000680   if i < 0
                                " not found, in Insert mode try character before the cursor
  296              0.001336     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
                                endif
  296              0.000322     if i < 0
                                  " not found, nothing to do
  296              0.000340       return
                                endif
                              endif
                            
                              " Figure out the arguments for searchpairpos().
  152              0.000218   if i % 2 == 0
   72              0.000144     let s_flags = 'nW'
   72              0.000249     let c2 = plist[i + 1]
   72              0.000058   else
   80              0.000147     let s_flags = 'nbW'
   80              0.000149     let c2 = c
   80              0.000267     let c = plist[i - 1]
   80              0.000070   endif
  152              0.000315   if c == '['
                                let c = '\['
                                let c2 = '\]'
                              endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
  152              0.000216   if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
                              endif
                            
                              " Build an expression that detects whether the current cursor position is in
                              " certain syntax types (string, comment, etc.), for use as searchpairpos()'s
                              " skip argument.
                              " We match "escape" for special items, such as lispEscapeSpecial.
  152              0.000796   let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|comment"''))'
                              " If executing the expression determines that the cursor is currently in
                              " one of the syntax types, then we want searchpairpos() to find the pair
                              " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                              " outside of the syntax types and s_skip should keep its value so we skip any
                              " matching pair inside the syntax types.
  152              0.157977   execute 'if' s_skip '| let s_skip = 0 | endif'
                            
                              " Limit the search to lines visible in the window.
  152              0.000682   let stoplinebottom = line('w$')
  152              0.002996   let stoplinetop = line('w0')
  152              0.000278   if i % 2 == 0
   72              0.000273     let stopline = stoplinebottom
   72              0.000090   else
   80              0.000267     let stopline = stoplinetop
   80              0.000068   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
  152              0.000569   if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
  152              0.000807     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
  152              0.000128   endif
  152              0.000227   try
  152              0.280148     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
  152              0.000495   catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
                              endtry
                            
  152              0.000226   if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
                              endif
                            
                              " If a match is found setup match highlighting.
  152              0.000441   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
  100              0.000323     if exists('*matchaddpos')
  100              0.001985       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
  100              0.000114     else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                endif
  100              0.000218     let w:paren_hl_on = 1
  100              0.000085   endif

FUNCTION  airline#util#append()
Called 3276 times
Total time:   0.036427
 Self time:   0.036427

count  total (s)   self (s)
 3276              0.007601   if a:minwidth > 0 && winwidth(0) < a:minwidth
                                return ''
                              endif
 3276              0.011021   let prefix = s:spc == "\ua0" ? s:spc : s:spc.s:spc
 3276              0.009767   return empty(a:text) ? '' : prefix.g:airline_left_alt_sep.s:spc.a:text

FUNCTION  airline#extensions#branch#update_untracked_config()
Called 936 times
Total time:   0.012594
 Self time:   0.012594

count  total (s)   self (s)
  936              0.003350   if !has_key(s:vcs_config[a:vcs].untracked, a:file)
                                return
                              elseif s:vcs_config[a:vcs].untracked[a:file] != b:buffer_vcs_config[a:vcs].untracked
                                let b:buffer_vcs_config[a:vcs].untracked = s:vcs_config[a:vcs].untracked[a:file]
                                unlet! b:airline_head
                              endif

FUNCTION  airline#themes#get_highlight()
Called 52 times
Total time:   0.005834
 Self time:   0.000314

count  total (s)   self (s)
   52   0.005809   0.000289   return call('airline#highlighter#get_highlight', [a:group] + a:000)

FUNCTION  <SNR>15_repo_head_ref()
Called 468 times
Total time:   0.026579
 Self time:   0.020888

count  total (s)   self (s)
  468   0.011995   0.008808   if !filereadable(self.dir('HEAD'))
                                return ''
                              endif
  468   0.013159   0.010655   return readfile(self.dir('HEAD'))[0]

FUNCTION  <SNR>59_ws_refresh()
Called 1 time
Total time:   0.000033
 Self time:   0.000033

count  total (s)   self (s)
    1              0.000024   if get(b:, 'airline_ws_changedtick', 0) == b:changedtick
    1              0.000004     return
                              endif
                              unlet! b:airline_whitespace_check
                              if get(g:, 'airline_skip_empty_sections', 0)
                                exe ':AirlineRefresh'
                              endif
                              let b:airline_ws_changedtick = b:changedtick

FUNCTION  airline#parts#filetype()
Called 468 times
Total time:   0.002762
 Self time:   0.002762

count  total (s)   self (s)
  468              0.002439   return winwidth(0) < 90 && strlen(&filetype) > 3 ? matchstr(&filetype, '...'). (&encoding is? 'utf-8' ? '…' : '>') : &filetype

FUNCTION  airline#parts#iminsert()
Called 468 times
Total time:   0.003243
 Self time:   0.003243

count  total (s)   self (s)
  468              0.001341   if g:airline_detect_iminsert && &iminsert && exists('b:keymap_name')
                                return toupper(b:keymap_name)
                              endif
  468              0.000374   return ''

FUNCTION  airline#extensions#tabline#buflist#list()
Called 2 times
Total time:   0.000031
 Self time:   0.000031

count  total (s)   self (s)
    2              0.000018   if exists('s:current_buffer_list')
    2              0.000008     return s:current_buffer_list
                              endif
                            
                              let excludes = get(g:, 'airline#extensions#tabline#excludes', [])
                              let exclude_preview = get(g:, 'airline#extensions#tabline#exclude_preview', 1)
                            
                              let list = (exists('g:did_bufmru') && g:did_bufmru) ? BufMRUList() : range(1, bufnr("$"))
                            
                              let buffers = []
                              " If this is too slow, we can switch to a different algorithm.
                              " Basically branch 535 already does it, but since it relies on
                              " BufAdd autocommand, I'd like to avoid this if possible.
                              for nr in list
                                if buflisted(nr)
                                  " Do not add to the bufferlist, if either
                                  " 1) buffername matches exclude pattern
                                  " 2) buffer is a quickfix buffer
                                  " 3) exclude preview windows (if 'bufhidden' == wipe
                                  "    and 'buftype' == nofile
                                  if (!empty(excludes) && match(bufname(nr), join(excludes, '\|')) > -1) || (getbufvar(nr, 'current_syntax') == 'qf') ||  (exclude_preview && getbufvar(nr, '&bufhidden') == 'wipe'  && getbufvar(nr, '&buftype') == 'nofile')
                                    continue
                                  endif
                                  call add(buffers, nr)
                                endif
                              endfor
                            
                              let s:current_buffer_list = buffers
                              return buffers

FUNCTION  <SNR>15_repo()
Called 936 times
Total time:   0.023947
 Self time:   0.023947

count  total (s)   self (s)
  936              0.006309   let dir = a:0 ? a:1 : (exists('b:git_dir') && b:git_dir !=# '' ? b:git_dir : fugitive#extract_git_dir(expand('%:p')))
  936              0.001345   if dir !=# ''
  936              0.002398     if has_key(s:repos, dir)
  936              0.002514       let repo = get(s:repos, dir)
  936              0.000763     else
                                  let repo = {'git_dir': dir}
                                  let s:repos[dir] = repo
                                endif
  936              0.006004     return extend(extend(repo, s:repo_prototype, 'keep'), s:abstract_prototype, 'keep')
                              endif
                              call s:throw('not a git repository: '.expand('%:p'))

FUNCTION  airline#extensions#syntastic#get_error()
Called 468 times
Total time:   0.058254
 Self time:   0.002388

count  total (s)   self (s)
  468   0.058015   0.002149   return airline#extensions#syntastic#get('error')

FUNCTION  <SNR>53_sync_active_winnr()
Called 448 times
Total time:   0.004599
 Self time:   0.004599

count  total (s)   self (s)
  448              0.002734   if exists('#airline') && winnr() != s:active_winnr
                                call airline#update_statusline()
                              endif

FUNCTION  41()
Called 936 times
Total time:   0.024040
 Self time:   0.018607

count  total (s)   self (s)
  936              0.003238     let buf = a:0 ? a:1 : bufnr('')
  936   0.011422   0.005989     let loclist = syntastic#util#getbufvar(buf, 'syntastic_loclist', {})
  936              0.003618     if type(loclist) != type({}) || empty(loclist)
                                    unlet! loclist
                                    let loclist = g:SyntasticLoclist.New([])
                                endif
  936              0.001057     return loclist

FUNCTION  airline#extensions#tabline#get_buffer_name()
Called 2 times
Total time:   0.000569
 Self time:   0.000099

count  total (s)   self (s)
    2   0.000075   0.000044   let buffers = a:0 ? a:1 : airline#extensions#tabline#buflist#list()
    2   0.000490   0.000051   return airline#extensions#tabline#formatters#{s:formatter}#format(a:nr, buffers)

FUNCTION  50()
Called 936 times
Total time:   0.058390
 Self time:   0.058390

count  total (s)   self (s)
  936              0.002793     if !exists('self._stl_format')
                                    let self._stl_format = ''
                                endif
  936              0.002095     if !exists('self._stl_flag')
                                    let self._stl_flag = ''
                                endif
                            
  936              0.001910     if g:syntastic_stl_format !=# self._stl_format
  936              0.002234         let self._stl_format = g:syntastic_stl_format
                            
  936              0.001857         if !empty(self._rawLoclist)
                                        let errors = self.errors()
                                        let warnings = self.warnings()
                            
                                        let num_errors = len(errors)
                                        let num_warnings = len(warnings)
                                        let num_issues = len(self._rawLoclist)
                            
                                        let output = self._stl_format
                            
                                        "hide stuff wrapped in %E(...) unless there are errors
                                        let output = substitute(output, '\m\C%E{\([^}]*\)}', num_errors ? '\1' : '' , 'g')
                            
                                        "hide stuff wrapped in %W(...) unless there are warnings
                                        let output = substitute(output, '\m\C%W{\([^}]*\)}', num_warnings ? '\1' : '' , 'g')
                            
                                        "hide stuff wrapped in %B(...) unless there are both errors and warnings
                                        let output = substitute(output, '\m\C%B{\([^}]*\)}', (num_warnings && num_errors) ? '\1' : '' , 'g')
                            
                                        let flags = { '%':  '%', 't':  num_issues, 'e':  num_errors, 'w':  num_warnings, 'N':  (num_issues ? fnamemodify( bufname(self._rawLoclist[0]['bufnr']), ':t') : ''), 'P':  (num_issues ? fnamemodify( bufname(self._rawLoclist[0]['bufnr']), ':p:~:.') : ''), 'F':  (num_issues ? self._rawLoclist[0]['lnum'] : ''), 'ne': (num_errors ? fnamemodify( bufname(errors[0]['bufnr']), ':t') : ''), 'pe': (num_errors ? fnamemodify( bufname(errors[0]['bufnr']), ':p:~:.') : ''), 'fe': (num_errors ? errors[0]['lnum'] : ''), 'nw': (num_warnings ? fnamemodify( bufname(warnings[0]['bufnr']), ':t') : ''), 'pw': (num_warnings ? fnamemodify( bufname(warnings[0]['bufnr']), ':p:~:.') : ''), 'fw': (num_warnings ? warnings[0]['lnum'] : '') }
                                        let output = substitute(output, '\v\C\%(-?\d*%(\.\d+)?)([npf][ew]|[NPFtew%])', '\=syntastic#util#wformat(submatch(1), flags[submatch(2)])', 'g')
                            
                                        let self._stl_flag = output
                                    else
  936              0.001535             let self._stl_flag = ''
  936              0.000710         endif
  936              0.000543     endif
                            
  936              0.001236     return self._stl_flag

FUNCTION  <SNR>71_Get()
Called 210 times
Total time:   0.001434
 Self time:   0.001434

count  total (s)   self (s)
  210              0.000595   let res=get(a:dict, a:key, '')
  210              0.000266   if res is ''
   88              0.000078     return ''
                              else
  122              0.000182     return a:prefix. res
                              endif

FUNCTION  airline#util#wrap()
Called 3744 times
Total time:   0.021414
 Self time:   0.021414

count  total (s)   self (s)
 3744              0.009133   if a:minwidth > 0 && winwidth(0) < a:minwidth
                                return ''
                              endif
 3744              0.004251   return a:text

FUNCTION  airline#extensions#tabline#get()
Called 2 times
Total time:   0.000423
 Self time:   0.000243

count  total (s)   self (s)
    2              0.000067   let curtabcnt = tabpagenr('$')
    2              0.000016   if curtabcnt != s:current_tabcnt
                                let s:current_tabcnt = curtabcnt
                                call airline#extensions#tabline#tabs#invalidate()
                                call airline#extensions#tabline#buffers#invalidate()
                                call airline#extensions#tabline#ctrlspace#invalidate()
                              endif
                            
    2              0.000023   if !exists('#airline#BufAdd#*')
                                autocmd airline BufAdd * call <sid>update_tabline()
                              endif
    2              0.000006   if s:ctrlspace
                                return airline#extensions#tabline#ctrlspace#get()
                              elseif s:show_buffers && curtabcnt == 1 || !s:show_tabs
    2   0.000221   0.000041     return airline#extensions#tabline#buffers#get()
                              else
                                return airline#extensions#tabline#tabs#get()
                              endif

FUNCTION  airline#extensions#whitespace#check()
Called 468 times
Total time:   0.052448
 Self time:   0.045759

count  total (s)   self (s)
  468              0.002024   let max_lines = get(g:, 'airline#extensions#whitespace#max_lines', 20000)
  468              0.002896   if &readonly || !&modifiable || !s:enabled || line('$') > max_lines || get(b:, 'airline_whitespace_disabled', 0)
                                return ''
                              endif
                            
  468              0.001573   if !exists('b:airline_whitespace_check')
                                let b:airline_whitespace_check = ''
                                let checks = get(b:, 'airline_whitespace_checks', get(g:, 'airline#extensions#whitespace#checks', s:default_checks))
                            
                                let trailing = 0
                                if index(checks, 'trailing') > -1
                                  try
                                    let regexp = get(g:, 'airline#extensions#whitespace#trailing_regexp', '\s$')
                                    let trailing = search(regexp, 'nw')
                                  catch
                                    echomsg 'airline#whitespace: error occured evaluating '. regexp
                                    echomsg v:exception
                                    return ''
                                  endtry
                                endif
                            
                                let mixed = 0
                                let check = 'indent'
                                if index(checks, check) > -1 && index(get(s:skip_check_ft, &ft, []), check) < 0
                                  let mixed = s:check_mixed_indent()
                                endif
                            
                                let mixed_file = ''
                                let check = 'mixed-indent-file'
                                if index(checks, check) > -1 && index(get(s:skip_check_ft, &ft, []), check) < 0
                                  let mixed_file = s:check_mixed_indent_file()
                                endif
                            
                                let long = 0
                                if index(checks, 'long') > -1 && &tw > 0
                                  let long = search('\%>'.&tw.'v.\+', 'nw')
                                endif
                            
                                if trailing != 0 || mixed != 0 || long != 0 || !empty(mixed_file)
                                  let b:airline_whitespace_check = s:symbol
                                  if strlen(s:symbol) > 0
                                    let space = (g:airline_symbols.space)
                                  else
                                    let space = ''
                                  endif
                            
                                  if s:show_message
                                    if trailing != 0
                                      let trailing_fmt = get(g:, 'airline#extensions#whitespace#trailing_format', '[%s]trailing')
                                      let b:airline_whitespace_check .= space.printf(trailing_fmt, trailing)
                                    endif
                                    if mixed != 0
                                      let mixed_indent_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_format', '[%s]mixed-indent')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_fmt, mixed)
                                    endif
                                    if long != 0
                                      let long_fmt = get(g:, 'airline#extensions#whitespace#long_format', '[%s]long')
                                      let b:airline_whitespace_check .= space.printf(long_fmt, long)
                                    endif
                                    if !empty(mixed_file)
                                      let mixed_indent_file_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_file_format', '[%s]mix-indent-file')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_file_fmt, mixed_file)
                                    endif
                                  endif
                                endif
                              endif
  468   0.009106   0.002417   return airline#util#shorten(b:airline_whitespace_check, 120, 9)

FUNCTION  syntastic#util#getbufvar()
Called 936 times
Total time:   0.005433
 Self time:   0.005433

count  total (s)   self (s)
  936              0.004890     return a:0 ? s:_getbufvar(a:buf, a:name, a:1) : getbufvar(a:buf, a:name)

FUNCTION  airline#extensions#syntastic#get()
Called 936 times
Total time:   0.116910
 Self time:   0.027117

count  total (s)   self (s)
  936              0.003712   let _backup = get(g:, 'syntastic_stl_format', '')
  936              0.002497   let is_err = (a:type  is# 'error')
  936              0.001114   if is_err
  468              0.001875     let g:syntastic_stl_format = get(g:, 'airline#extensions#syntastic#stl_format_err', '%E{[%e(#%fe)]}')
  468              0.000367   else
  468              0.001844     let g:syntastic_stl_format = get(g:, 'airline#extensions#syntastic#stl_format_warn', '%W{[%w(#%fw)]}')
  468              0.000358   endif
  936   0.093487   0.003694   let cnt = SyntasticStatuslineFlag()
  936              0.001853   if !empty(_backup)
  936              0.001949     let g:syntastic_stl_format = _backup
  936              0.000641   endif
  936              0.001429   if empty(cnt)
  936              0.000894     return ''
                              else
                                return (is_err ? s:error_symbol : s:warning_symbol).cnt
                              endif

FUNCTION  <SNR>15_repo_head()
Called 468 times
Total time:   0.062880
 Self time:   0.017712

count  total (s)   self (s)
  468   0.041254   0.003940     let head = s:repo().head_ref()
                            
  468              0.004954     if head =~# '^ref: '
  468   0.011247   0.003393       let branch = s:sub(head,'^ref: %(refs/%(heads/|remotes/|tags/)=)=','')
  468              0.000734     elseif head =~# '^\x\{40\}$'
                                  " truncate hash to a:1 characters if we're in detached head mode
                                  let len = a:0 ? a:1 : 0
                                  let branch = len ? head[0:len-1] : ''
                                else
                                  return ''
                                endif
                            
  468              0.000595     return branch

FUNCTION  <SNR>57_update_git_branch()
Called 468 times
Total time:   0.104756
 Self time:   0.021303

count  total (s)   self (s)
  468              0.000897   if !s:has_fugitive
                                let s:vcs_config['git'].branch = ''
                                return
                              endif
                            
  468   0.085609   0.002156   let name = fugitive#head(7)
  468              0.000938   if empty(name)
                                if has_key(s:git_dirs, a:path)
                                  let s:vcs_config['git'].branch = s:git_dirs[a:path]
                                  return
                                endif
                            
                                let dir = fugitive#extract_git_dir(a:path)
                                if empty(dir)
                                  let name = ''
                                else
                                  try
                                    let line = join(readfile(dir . '/HEAD'))
                                    if strpart(line, 0, 16) == 'ref: refs/heads/'
                                      let name = strpart(line, 16)
                                    else
                                      " raw commit hash
                                      let name = strpart(line, 0, 7)
                                    endif
                                  catch
                                    let name = ''
                                  endtry
                                endif
                              endif
                            
  468              0.001592   let s:git_dirs[a:path] = name
  468              0.001296   let s:vcs_config['git'].branch = name

FUNCTION  airline#highlighter#highlight()
Called 2 times
Total time:   0.045461
 Self time:   0.005746

count  total (s)   self (s)
    2              0.000007   let bufnr = a:0 ? a:1 : ''
    2              0.000009   let p = g:airline#themes#{g:airline_theme}#palette
                            
                              " draw the base mode, followed by any overrides
    2              0.000019   let mapped = map(a:modes, 'v:val == a:modes[0] ? v:val : a:modes[0]."_".v:val')
    2              0.000009   let suffix = a:modes[0] == 'inactive' ? '_inactive' : ''
    4              0.000011   for mode in mapped
    2              0.000007     if mode == 'inactive' && winnr('$') == 1
                                  " there exist no inactive windows, don't need to create all those
                                  " highlighting groups
                                  continue
                                endif
    2              0.000013     if exists('g:airline#themes#{g:airline_theme}#palette[mode]')
    2              0.000010       let dict = g:airline#themes#{g:airline_theme}#palette[mode]
   46              0.000093       for kvp in items(dict)
   44              0.000121         let mode_colors = kvp[1]
   44              0.000093         let name = kvp[0]
   44              0.000125         if name is# 'airline_c' && !empty(bufnr) && suffix is# '_inactive'
                                      let name = 'airline_c'.bufnr
                                    endif
   44   0.009924   0.000284         call airline#highlighter#exec(name.suffix, mode_colors)
                            
  132              0.000229         for accent in keys(s:accents)
   88              0.000209           if !has_key(p.accents, accent)
                                        continue
                                      endif
   88              0.000263           let colors = copy(mode_colors)
   88              0.000232           if p.accents[accent][0] != ''
   44              0.000147             let colors[0] = p.accents[accent][0]
   44              0.000030           endif
   88              0.000180           if p.accents[accent][2] != ''
   44              0.000127             let colors[2] = p.accents[accent][2]
   44              0.000032           endif
   88              0.000144           if len(colors) >= 5
   88              0.000323             let colors[4] = get(p.accents[accent], 4, '')
   88              0.000071           else
                                        call add(colors, get(p.accents[accent], 4, ''))
                                      endif
   88   0.019006   0.000622           call airline#highlighter#exec(name.suffix.'_'.accent, colors)
   88              0.000082         endfor
   44              0.000039       endfor
                            
                                  " TODO: optimize this
   28              0.000047       for sep in items(s:separators)
   26   0.011925   0.000234         call <sid>exec_separator(dict, sep[1][0], sep[1][1], sep[1][2], suffix)
   26              0.000025       endfor
    2              0.000004     endif
    2              0.000001   endfor

FUNCTION  airline#parts#ffenc()
Called 468 times
Total time:   0.013356
 Self time:   0.013356

count  total (s)   self (s)
  468              0.002053   let expected = get(g:, 'airline#parts#ffenc#skip_expected_string', '')
  468              0.001186   let bomb     = &l:bomb ? '[BOM]' : ''
  468              0.004684   let ff       = strlen(&ff) ? '['.&ff.']' : ''
  468              0.002244   if expected is# &fenc.bomb.ff
                                return ''
                              else
  468              0.001685     return &fenc.bomb.ff
                              endif

FUNCTION  <SNR>57_update_untracked()
Called 468 times
Total time:   0.050471
 Self time:   0.037877

count  total (s)   self (s)
  468              0.004390   let file = expand("%:p")
  468              0.002159   if empty(file) || isdirectory(file)
                                return
                              endif
                            
  468              0.000882   let needs_update = 1
 1404              0.002788   for vcs in keys(s:vcs_config)
  936              0.005429     if file =~ s:vcs_config[vcs].exclude
                                  " Skip check for files that live in the exclude directory
                                  let needs_update = 0
                                endif
  936              0.003070     if has_key(s:vcs_config[vcs].untracked, file)
  936              0.001543       let needs_update = 0
  936   0.018220   0.005626       call airline#extensions#branch#update_untracked_config(file, vcs)
  936              0.000672     endif
  936              0.000631   endfor
                            
  468              0.000571   if !needs_update
  468              0.000423     return
                              endif
                            
                              for vcs in keys(s:vcs_config)
                                let config = s:vcs_config[vcs]
                                if g:airline#init#vim_async
                                  " Note that asynchronous update updates s:vcs_config only, and only
                                  " s:update_untracked updates b:buffer_vcs_config. If s:vcs_config is
                                  " invalidated again before s:update_untracked is called, then we lose the
                                  " result of the previous call, i.e. the head string is not updated. It
                                  " doesn't happen often in practice, so we let it be.
                                  call airline#async#vim_vcs_untracked(config, file)
                                else
                                  " nvim async or vim without job-feature
                                  call airline#async#nvim_vcs_untracked(config, file, vcs)
                                endif
                              endfor

FUNCTION  <SNR>61_wordcount_update()
Called 448 times
Total time:   0.022984
 Self time:   0.022984

count  total (s)   self (s)
  448              0.001433   if empty(bufname(''))
                                return
                              endif
  448              0.008562   if match(&ft, get(g:, 'airline#extensions#wordcount#filetypes')) > -1
                                let l:mode = mode()
                                if l:mode ==# 'v' || l:mode ==# 'V' || l:mode ==# 's' || l:mode ==# 'S'
                                  let b:airline_wordcount = airline#extensions#wordcount#formatters#{s:formatter}#format()
                                  let b:airline_change_tick = b:changedtick
                                else
                                  if get(b:, 'airline_wordcount_cache', '') is# '' || b:airline_wordcount_cache isnot# get(b:, 'airline_wordcount', '') || get(b:, 'airline_change_tick', 0) != b:changedtick ||  get(b:, 'airline_winwidth', 0) != winwidth(0)
                                    " cache data
                                    let b:airline_wordcount = airline#extensions#wordcount#formatters#{s:formatter}#format()
                                    let b:airline_wordcount_cache = b:airline_wordcount
                                    let b:airline_change_tick = b:changedtick
                                    let b:airline_winwidth = winwidth(0)
                                  endif
                                endif
                              endif

FUNCTION  airline#parts#paste()
Called 468 times
Total time:   0.001686
 Self time:   0.001686

count  total (s)   self (s)
  468              0.001421   return g:airline_detect_paste && &paste ? g:airline_symbols.paste : ''

FUNCTION  airline#parts#readonly()
Called 468 times
Total time:   0.003661
 Self time:   0.003661

count  total (s)   self (s)
  468              0.001490   if &readonly && !filereadable(bufname('%'))
                                return '[noperm]'
                              else
  468              0.000873     return &readonly ? g:airline_symbols.readonly : ''
                              endif

FUNCTION  <SNR>71_exec_separator()
Called 26 times
Total time:   0.011691
 Self time:   0.000934

count  total (s)   self (s)
   26              0.000048   if pumvisible()
                                return
                              endif
   26   0.003106   0.000132   let l:from = airline#themes#get_highlight(a:from.a:suffix)
   26   0.002988   0.000128   let l:to = airline#themes#get_highlight(a:to.a:suffix)
   26              0.000078   let group = a:from.'_to_'.a:to.a:suffix
   26              0.000031   if a:inverse
    8              0.000037     let colors = [ l:from[1], l:to[1], l:from[3], l:to[3] ]
    8              0.000005   else
   18              0.000081     let colors = [ l:to[1], l:from[1], l:to[3], l:from[3] ]
   18              0.000012   endif
   26              0.000070   let a:dict[group] = colors
   26   0.005081   0.000158   call airline#highlighter#exec(group, colors)

FUNCTION  airline#highlighter#exec()
Called 160 times
Total time:   0.033528
 Self time:   0.010077

count  total (s)   self (s)
  160              0.000334   if pumvisible()
                                return
                              endif
  160              0.000301   let colors = a:colors
  160              0.000196   if s:is_win32term
                                let colors[2] = s:gui2cui(get(colors, 0, ''), get(colors, 2, ''))
                                let colors[3] = s:gui2cui(get(colors, 1, ''), get(colors, 3, ''))
                              endif
  160   0.018931   0.000759   let old_hi = airline#highlighter#get_highlight(a:group)
  160              0.000335   if len(colors) == 4
   26              0.000059     call add(colors, '')
   26              0.000022   endif
  160              0.000222   if g:airline_gui_mode ==# 'gui'
                                let new_hi = [colors[0], colors[1], '', '', colors[4]]
                              else
  160              0.001048     let new_hi = ['', '', printf("%s", colors[2]), printf("%s", colors[3]), colors[4]]
  160              0.000130   endif
  160   0.002936   0.000740   let colors = s:CheckDefined(colors)
  160   0.002418   0.000769   if old_hi != new_hi || !s:hl_group_exists(a:group)
   30   0.002174   0.000740     let cmd = printf('hi %s %s %s %s %s %s %s %s', a:group, s:Get(colors, 0, 'guifg='), s:Get(colors, 1, 'guibg='), s:Get(colors, 2, 'ctermfg='), s:Get(colors, 3, 'ctermbg='), s:Get(colors, 4, 'gui='), s:Get(colors, 4, 'cterm='), s:Get(colors, 4, 'term='))
   30              0.000269     exe cmd
   30              0.000078     if has_key(s:hl_groups, a:group)
   30              0.000070       let s:hl_groups[a:group] = colors
   30              0.000016     endif
   30              0.000014   endif

FUNCTION  <SNR>15_sub()
Called 468 times
Total time:   0.007854
 Self time:   0.007854

count  total (s)   self (s)
  468              0.007544   return substitute(a:str,'\v\C'.a:pat,a:rep,'')

FUNCTION  <SNR>65_map_keys()
Called 2 times
Total time:   0.000071
 Self time:   0.000071

count  total (s)   self (s)
    2              0.000008   if s:buffer_idx_mode
                                noremap <silent> <Plug>AirlineSelectTab1 :call <SID>select_tab(0)<CR>
                                noremap <silent> <Plug>AirlineSelectTab2 :call <SID>select_tab(1)<CR>
                                noremap <silent> <Plug>AirlineSelectTab3 :call <SID>select_tab(2)<CR>
                                noremap <silent> <Plug>AirlineSelectTab4 :call <SID>select_tab(3)<CR>
                                noremap <silent> <Plug>AirlineSelectTab5 :call <SID>select_tab(4)<CR>
                                noremap <silent> <Plug>AirlineSelectTab6 :call <SID>select_tab(5)<CR>
                                noremap <silent> <Plug>AirlineSelectTab7 :call <SID>select_tab(6)<CR>
                                noremap <silent> <Plug>AirlineSelectTab8 :call <SID>select_tab(7)<CR>
                                noremap <silent> <Plug>AirlineSelectTab9 :call <SID>select_tab(8)<CR>
                                noremap <silent> <Plug>AirlineSelectPrevTab :<C-u>call <SID>jump_to_tab(-v:count1)<CR>
                                noremap <silent> <Plug>AirlineSelectNextTab :<C-u>call <SID>jump_to_tab(v:count1)<CR>
                              endif

FUNCTION  <SNR>57_update_hg_branch()
Called 468 times
Total time:   0.017019
 Self time:   0.017019

count  total (s)   self (s)
                              " path argument is not actually used, so we don't actually care about a:1
                              " it is just needed, because update_git_branch needs it.
  468              0.000817   if s:has_lawrencium
                                let cmd='LC_ALL=C hg qtop'
                                let stl=lawrencium#statusline()
                                let file=expand('%:p')
                                if !empty(stl) && get(b:, 'airline_do_mq_check', 1)
                                  if g:airline#init#vim_async
                                    call airline#async#get_mq_async(cmd, file)
                                  elseif has("nvim")
                                    call airline#async#nvim_get_mq_async(cmd, file)
                                  else
                                    " remove \n at the end of the command
                                    let output=system(cmd)[0:-2]
                                    call airline#async#mq_output(output, file)
                                  endif
                                endif
                                " do not do mq check anymore
                                let b:airline_do_mq_check = 0
                                if exists("b:mq") && !empty(b:mq)
                                  if stl is# 'default'
                                    " Shorten default a bit
                                    let stl='def'
                                  endif
                                  let stl.=' ['.b:mq.']'
                                endif
                                let s:vcs_config['mercurial'].branch = stl
                              else
  468              0.001261     let s:vcs_config['mercurial'].branch = ''
  468              0.000361   endif

FUNCTION  airline#parts#spell()
Called 468 times
Total time:   0.012745
 Self time:   0.012745

count  total (s)   self (s)
  468              0.005867   let spelllang = g:airline_detect_spelllang ? printf(" [%s]", toupper(substitute(&spelllang, ',', '/', 'g'))) : ''
  468              0.001033   if g:airline_detect_spell && &spell
                                if winwidth(0) >= 90
                                  return g:airline_symbols.spell . spelllang
                                elseif winwidth(0) >= 70
                                  return g:airline_symbols.spell
                                else
                                  return split(g:airline_symbols.spell, '\zs')[0]
                                endif
                              endif
  468              0.000375   return ''

FUNCTION  <SNR>71_CheckDefined()
Called 160 times
Total time:   0.002196
 Self time:   0.002196

count  total (s)   self (s)
                              " Checks, whether the definition of the colors is valid and is not empty or NONE
                              " e.g. if the colors would expand to this:
                              " hi airline_c ctermfg=NONE ctermbg=NONE
                              " that means to clear that highlighting group, therefore, fallback to Normal
                              " highlighting group for the cterm values
                            
                              " This only works, if the Normal highlighting group is actually defined, so
                              " return early, if it has been cleared
  160              0.000480   if !exists("g:airline#highlighter#normal_fg_hi")
                                let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cterm')
                              endif
  160              0.000433   if empty(g:airline#highlighter#normal_fg_hi) || g:airline#highlighter#normal_fg_hi < 0
  160              0.000193     return a:colors
                              endif
                            
                              for val in a:colors
                                if !empty(val) && val !=# 'NONE'
                                  return a:colors
                                endif
                              endfor
                              " this adds the bold attribute to the term argument of the :hi command,
                              " but at least this makes sure, the group will be defined
                              let fg = g:airline#highlighter#normal_fg_hi
                              let bg = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'cterm')
                              if bg < 0
                                " in case there is no background color defined for Normal
                                let bg = a:colors[3]
                              endif
                              return a:colors[0:1] + [fg, bg] + [a:colors[4]]

FUNCTION  airline#parts#crypt()
Called 468 times
Total time:   0.002716
 Self time:   0.002716

count  total (s)   self (s)
  468              0.002411   return g:airline_detect_crypt && exists("+key") && !empty(&key) ? g:airline_symbols.crypt : ''

FUNCTION  airline#extensions#tabline#formatters#default#wrap_name()
Called 2 times
Total time:   0.000090
 Self time:   0.000090

count  total (s)   self (s)
    2              0.000017   let _ = s:buf_nr_show ? printf(s:buf_nr_format, a:bufnr) : ''
    2              0.000031   let _ .= substitute(a:buffer_name, '\\', '/', 'g')
                            
    2              0.000016   if getbufvar(a:bufnr, '&modified') == 1
                                let _ .= s:buf_modified_symbol
                              endif
    2              0.000004   return _

FUNCTION  airline#extensions#tabline#formatters#default#format()
Called 2 times
Total time:   0.000439
 Self time:   0.000349

count  total (s)   self (s)
    2              0.000022   let fmod = get(g:, 'airline#extensions#tabline#fnamemod', ':~:.')
    2              0.000007   let _ = ''
                            
    2              0.000015   let name = bufname(a:bufnr)
    2              0.000010   if empty(name)
                                let _ .= '[No Name]'
                              else
    2              0.000006     if s:fnamecollapse
    2              0.000155       let _ .= substitute(fnamemodify(name, fmod), '\v\w\zs.{-}\ze(\\|/)', '', 'g')
    2              0.000006     else
                                  let _ .= fnamemodify(name, fmod)
                                endif
    2              0.000020     if a:bufnr != bufnr('%') && s:fnametruncate && strlen(_) > s:fnametruncate
                                  let _ = strpart(_, 0, s:fnametruncate)
                                endif
    2              0.000004   endif
                            
    2   0.000142   0.000052   return airline#extensions#tabline#formatters#default#wrap_name(a:bufnr, _)

FUNCTION  airline#extensions#branch#head()
Called 468 times
Total time:   0.224359
 Self time:   0.011869

count  total (s)   self (s)
  468              0.001702   if !exists('b:buffer_vcs_config')
                                call s:init_buffer()
                              endif
                            
  468   0.164469   0.002450   call s:update_branch()
  468   0.052983   0.002512   call s:update_untracked()
                            
  468              0.001889   if exists('b:airline_head') && !empty(b:airline_head)
  468              0.000726     return b:airline_head
                              endif
                            
                              let b:airline_head = ''
                              let vcs_priority = get(g:, "airline#extensions#branch#vcs_priority", ["git", "mercurial"])
                            
                              let heads = {}
                              for vcs in vcs_priority
                                if !empty(b:buffer_vcs_config[vcs].branch)
                                  let heads[vcs] = b:buffer_vcs_config[vcs].branch
                                endif
                              endfor
                            
                              for vcs in keys(heads)
                                if !empty(b:airline_head)
                                  let b:airline_head .= ' | '
                                endif
                                let b:airline_head .= (len(heads) > 1 ? s:vcs_config[vcs].exe .':' : '') . s:format_name(heads[vcs])
                                let b:airline_head .= b:buffer_vcs_config[vcs].untracked
                              endfor
                            
                              if empty(heads)
                                if s:has_vcscommand
                                  call VCSCommandEnableBufferSetup()
                                  if exists('b:VCSCommandBufferInfo')
                                    let b:airline_head = s:format_name(get(b:VCSCommandBufferInfo, 0, ''))
                                  endif
                                endif
                              endif
                            
                              if exists("g:airline#extensions#branch#displayed_head_limit")
                                let w:displayed_head_limit = g:airline#extensions#branch#displayed_head_limit
                                if len(b:airline_head) > w:displayed_head_limit - 1
                                  let b:airline_head = b:airline_head[0:(w:displayed_head_limit - 1)].(&encoding ==? 'utf-8' ?  '…' : '.')
                                endif
                              endif
                            
                              if has_key(heads, 'git') && !s:check_in_path()
                                let b:airline_head = ''
                              endif
                              let minwidth = empty(get(b:, 'airline_hunks', '')) ? 14 : 7
                              let b:airline_head = airline#util#shorten(b:airline_head, 120, minwidth)
                              return b:airline_head

FUNCTION  <SNR>71_get_syn()
Called 424 times
Total time:   0.011792
 Self time:   0.011792

count  total (s)   self (s)
  424              0.001106   if !exists("g:airline_gui_mode")
                                let g:airline_gui_mode = airline#init#gui_mode()
                              endif
  424              0.000569   let color = ''
  424              0.001431   if hlexists(a:group)
  416              0.002371     let color = synIDattr(synIDtrans(hlID(a:group)), a:what, g:airline_gui_mode)
  416              0.000329   endif
  424              0.000881   if empty(color) || color == -1
                                " should always exists
   34              0.000228     let color = synIDattr(synIDtrans(hlID('Normal')), a:what, g:airline_gui_mode)
                                " however, just in case
   34              0.000058     if empty(color) || color == -1
   34              0.000050       let color = 'NONE'
   34              0.000021     endif
   34              0.000017   endif
  424              0.000423   return color

FUNCTION  airline#parts#mode()
Called 468 times
Total time:   0.011819
 Self time:   0.004001

count  total (s)   self (s)
  468   0.011520   0.003702   return airline#util#shorten(get(w:, 'airline_current_mode', ''), 79, 1)

FUNCTION  <SNR>15_repo_dir()
Called 936 times
Total time:   0.005691
 Self time:   0.005691

count  total (s)   self (s)
  936              0.005106   return join([self.git_dir]+a:000,'/')

FUNCTION  fugitive#head()
Called 468 times
Total time:   0.083453
 Self time:   0.007361

count  total (s)   self (s)
  468              0.001492   if !exists('b:git_dir')
                                return ''
                              endif
                            
  468   0.080508   0.004416   return s:repo().head(a:0 ? a:1 : 0)

FUNCTION  airline#extensions#tabline#buffers#get()
Called 2 times
Total time:   0.000180
 Self time:   0.000109

count  total (s)   self (s)
    2   0.000106   0.000035   call <sid>map_keys()
    2              0.000017   let cur = bufnr('%')
    2              0.000008   if cur == s:current_bufnr
    2              0.000028     if !g:airline_detect_modified || getbufvar(cur, '&modified') == s:current_modified
    2              0.000012       return s:current_tabline
                                endif
                              endif
                            
                              let l:index = 1
                              let b = airline#extensions#tabline#new_builder()
                              let tab_bufs = tabpagebuflist(tabpagenr())
                              for nr in s:get_visible_buffers()
                                if nr < 0
                                  call b.add_raw('%#airline_tabhid#...')
                                  continue
                                endif
                            
                                let group = airline#extensions#tabline#group_of_bufnr(tab_bufs, nr)
                            
                                if nr == cur
                                  let s:current_modified = (group == 'airline_tabmod') ? 1 : 0
                                endif
                            
                                " Neovim feature: Have clickable buffers
                                if has("tablineat")
                                  call b.add_raw('%'.nr.'@airline#extensions#tabline#buffers#clickbuf@')
                                endif
                                if s:buffer_idx_mode
                                  if len(s:number_map) > 0
                                    call b.add_section(group, s:spc . get(s:number_map, l:index, '') . '%(%{airline#extensions#tabline#get_buffer_name('.nr.')}%)' . s:spc)
                                  else
                                    call b.add_section(group, '['.l:index.s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.nr.')}%)'.']')
                                  endif
                                  let l:index = l:index + 1
                                else
                                  call b.add_section(group, s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.nr.')}%)'.s:spc)
                                endif
                                if has("tablineat")
                                  call b.add_raw('%X')
                                endif
                              endfor
                            
                              call b.add_section('airline_tabfill', '')
                              call b.split()
                              call b.add_section('airline_tabfill', '')
                              if s:show_tab_type
                                call b.add_section_spaced('airline_tabtype', s:buffers_label)
                              endif
                              if tabpagenr('$') > 1
                                call b.add_section_spaced('airline_tabmod', printf('%s %d/%d', "tab", tabpagenr(), tabpagenr('$')))
                              endif
                            
                              let s:current_bufnr = cur
                              let s:current_tabline = b.build()
                              return s:current_tabline

FUNCTION  airline#statusline()
Called 468 times
Total time:   0.012901
 Self time:   0.012901

count  total (s)   self (s)
  468              0.006328   if has_key(s:contexts, a:winnr)
  468              0.004810     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
                              endif
                            
                              " in rare circumstances this happens...see #276
                              return ''

FUNCTION  airline#highlighter#get_highlight()
Called 212 times
Total time:   0.023692
 Self time:   0.010103

count  total (s)   self (s)
  212              0.000762   if get(g:, 'airline_highlighting_cache', 0) && has_key(s:hl_groups, a:group)
                                return s:hl_groups[a:group]
                              else
  212   0.006977   0.000943     let fg = s:get_syn(a:group, 'fg')
  212   0.006701   0.000943     let bg = s:get_syn(a:group, 'bg')
  212              0.002341     let reverse = g:airline_gui_mode ==# 'gui' ? synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'gui') : synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'cterm')|| synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'term')
  212              0.001014     let bold = synIDattr(synIDtrans(hlID(a:group)), 'bold')
  212              0.000332     let opts = a:000
  212              0.000219     if bold
   44              0.000073       let opts = ['bold']
   44              0.000029     endif
  212   0.003118   0.001321     let res = reverse ? s:get_array(bg, fg, opts) : s:get_array(fg, bg, opts)
  212              0.000167   endif
  212              0.000583   let s:hl_groups[a:group] = res
  212              0.000207   return res

FUNCTION  airline#util#shorten()
Called 936 times
Total time:   0.014507
 Self time:   0.014507

count  total (s)   self (s)
  936              0.004011   if winwidth(0) < a:winwidth && len(split(a:text, '\zs')) > a:minwidth
                                if get(a:000, 0, 0)
                                  " shorten from tail
                                  return '…'.matchstr(a:text, '.\{'.a:minwidth.'}$')
                                else
                                  " shorten from beginning of string
                                  return matchstr(a:text, '^.\{'.a:minwidth.'}').'…'
                                endif
                              else
  936              0.001190     return a:text
                              endif

FUNCTION  <SNR>57_update_branch()
Called 468 times
Total time:   0.162019
 Self time:   0.040244

count  total (s)   self (s)
  468              0.013437   let b:airline_fname_path = get(b:, 'airline_fname_path', exists("*fnamemodify") ? fnamemodify(resolve(@%), ":p:h") : expand("%:p:h"))
 1404              0.003682   for vcs in keys(s:vcs_config)
  936   0.131125   0.009350     call {s:vcs_config[vcs].update_branch}(b:airline_fname_path)
  936              0.003879     if b:buffer_vcs_config[vcs].branch != s:vcs_config[vcs].branch
                                  let b:buffer_vcs_config[vcs].branch = s:vcs_config[vcs].branch
                                  unlet! b:airline_head
                                endif
  936              0.000804   endfor

FUNCTION  airline#highlighter#highlight_modified_inactive()
Called 2 times
Total time:   0.000667
 Self time:   0.000086

count  total (s)   self (s)
    2              0.000011   if getbufvar(a:bufnr, '&modified')
                                let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c : []
                              else
    2              0.000022     let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive.airline_c : []
    2              0.000002   endif
                            
    2              0.000005   if !empty(colors)
    2   0.000607   0.000026     call airline#highlighter#exec('airline_c'.(a:bufnr).'_inactive', colors)
    2              0.000001   endif

FUNCTION  airline#extensions#branch#get_head()
Called 468 times
Total time:   0.234233
 Self time:   0.009874

count  total (s)   self (s)
  468   0.226623   0.002264   let head = airline#extensions#branch#head()
  468              0.001937   let empty_message = get(g:, 'airline#extensions#branch#empty_message', '')
  468              0.001911   let symbol = get(g:, 'airline#extensions#branch#symbol', g:airline_symbols.branch)
  468              0.003141   return empty(head) ? empty_message : printf('%s%s', empty(symbol) ? '' : symbol.(g:airline_symbols.space), head)

FUNCTION  airline#extensions#keymap#status()
Called 468 times
Total time:   0.006379
 Self time:   0.006379

count  total (s)   self (s)
  468              0.003325   if (get(g:, 'airline#extensions#keymap#enabled', 1) && has('keymap'))
  468              0.002554     return printf('%s', (!empty(&keymap) ? (g:airline_symbols.keymap . ' '. &keymap) : ''))
                              else
                                return ''
                              endif

FUNCTION  <SNR>71_get_array()
Called 212 times
Total time:   0.001797
 Self time:   0.001797

count  total (s)   self (s)
  212              0.000751   let opts=empty(a:opts) ? '' : join(a:opts, ',')
  212              0.000913   return g:airline_gui_mode ==# 'gui' ? [ a:fg, a:bg, '', '', opts ] : [ '', '', a:fg, a:bg, opts ]

FUNCTION  SyntasticStatuslineFlag()
Called 936 times
Total time:   0.089793
 Self time:   0.007363

count  total (s)   self (s)
  936   0.089315   0.006885     return g:SyntasticLoclist.current().getStatuslineFlag()

FUNCTION  airline#extensions#syntastic#get_warning()
Called 468 times
Total time:   0.063567
 Self time:   0.002523

count  total (s)   self (s)
  468   0.063338   0.002294   return airline#extensions#syntastic#get('warning')

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
  448   0.522625             <SNR>37_Highlight_Matching_Pair()
  468   0.234233   0.009874  airline#extensions#branch#get_head()
  468   0.224359   0.011869  airline#extensions#branch#head()
  468   0.162019   0.040244  <SNR>57_update_branch()
  936   0.116910   0.027117  airline#extensions#syntastic#get()
  468   0.104756   0.021303  <SNR>57_update_git_branch()
  468   0.098938   0.052810  airline#check_mode()
  936   0.089793   0.007363  SyntasticStatuslineFlag()
  468   0.083453   0.007361  fugitive#head()
  468   0.063567   0.002523  airline#extensions#syntastic#get_warning()
  468   0.062880   0.017712  <SNR>15_repo_head()
  936   0.058390             50()
  468   0.058254   0.002388  airline#extensions#syntastic#get_error()
  468   0.052448   0.045759  airline#extensions#whitespace#check()
  468   0.050471   0.037877  <SNR>57_update_untracked()
    2   0.045461   0.005746  airline#highlighter#highlight()
 3276   0.036427             airline#util#append()
  160   0.033528   0.010077  airline#highlighter#exec()
  468   0.026579   0.020888  <SNR>15_repo_head_ref()
  936   0.024040   0.018607  41()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
  448              0.522625  <SNR>37_Highlight_Matching_Pair()
  936              0.058390  50()
  468   0.098938   0.052810  airline#check_mode()
  468   0.052448   0.045759  airline#extensions#whitespace#check()
  468   0.162019   0.040244  <SNR>57_update_branch()
  468   0.050471   0.037877  <SNR>57_update_untracked()
 3276              0.036427  airline#util#append()
  936   0.116910   0.027117  airline#extensions#syntastic#get()
  936              0.023947  <SNR>15_repo()
  448              0.022984  <SNR>61_wordcount_update()
 3744              0.021414  airline#util#wrap()
  468   0.104756   0.021303  <SNR>57_update_git_branch()
  468   0.026579   0.020888  <SNR>15_repo_head_ref()
  936   0.024040   0.018607  41()
  468   0.062880   0.017712  <SNR>15_repo_head()
  468              0.017019  <SNR>57_update_hg_branch()
  936              0.014507  airline#util#shorten()
  468              0.013356  airline#parts#ffenc()
  468              0.012901  airline#statusline()
  468              0.012745  airline#parts#spell()

